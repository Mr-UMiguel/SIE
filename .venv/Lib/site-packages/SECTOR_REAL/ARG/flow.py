from datetime import timedelta 
from prefect import task, Flow, Parameter 
import json
import sys

from SECTOR_REAL.ARG.extract import *
from SECTOR_REAL.ARG.transform  import clean

from playwright.sync_api import sync_playwright



settings = json.load(open("./settings.json","r"))
root_path = settings['root_path']

@task(max_retries = 3, retry_delay = timedelta(seconds=20), log_stdout=True)
def extract():
    print("""
    ****************************
    Iniciando la descarga de ARG
    ****************************
    """)
    with sync_playwright() as playwright:
        try:
            fn1_01_1 =  e1_01_1v(playwright,download_path=root_path+"/EXTRACT/SECTOR_REAL/ARG")
        except ValueError as ve:
            print(ve)
            pass
        try:
            fn1_11_1 =  e1_11_1v(playwright,download_path=root_path+"/EXTRACT/SECTOR_REAL/ARG")
        except ValueError as ve:
            print(ve)
            pass


    filenames = {
        '1_01_1' : fn1_01_1,
        '1_11_1' : fn1_11_1
    }

    return filenames

@task(log_stdout=True,)
def transform(filename):
    print("""
        Iniciando la transformaci√≥n del PIB de ARG
    """)
    return clean(filename,
                 extract_path=root_path+"/EXTRACT/SECTOR_REAL/ARG",
                 save_path=root_path+'/TRANSFORM/SECTOR_REAL/ARG')


with Flow("Extract 1.01.1 ARG") as flow:
    filename = extract()

    

# flow.register(project_name="FLAR prueba")
flow.run()